# 3. Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо
# создать класс «Клетка». В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__floordiv____truediv__()). Эти методы должны применяться
# только к клеткам и выполнять увеличение, уменьшение, умножение и округление до целого
# числа деления клеток соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться
# сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение
# количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
# количество ячеек в ряду. Этот метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5. В этом
# случае метод make_order() вернёт строку: *****\n*****\n**.
# Или количество ячеек клетки — 15, а количество ячеек в ряду равняется 5. Тогда метод
# make_order() вернёт строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:
    def __init__(self, cells):
        self.cells = cells

    def __str__(self):
        return str(self.cells)

    def __add__(self, other):
        return str(self.cells + other.cells)

    def __sub__(self, other):
        return self.cells - other.cells if self.cells - other.cells > 0 \
            else 'Не может быть отрицательное число клеток.'

    def __mul__(self, other):
        return str(self.cells * other.cells)

    def __truediv__(self, other):
        return str(self.cells // other.cells)

    def make_order(self, quantity):
        row = self.cells // quantity
        last_row = self.cells % quantity
        draw_cell = str()
        for _ in range(row):
            draw_cell += ''.join('*' * quantity) + '\n'
        draw_cell += ''.join('*' * last_row) + '\n'
        return draw_cell


cell_1 = Cell(20)
cell_2 = Cell(13)
print(cell_1)
print(cell_2)
print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 / cell_2)
print(cell_2.make_order(5))
print(cell_2.make_order(3))
